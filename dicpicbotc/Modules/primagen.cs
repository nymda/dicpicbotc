using Discord.Commands;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace dicpicbotc.Modules
{
    public class primagen : ModuleBase<SocketCommandContext>
    {
        //same random instance to be used in all random functions
        public static Random rnd = new Random();

        //images for bases and data of images
        public const int _width = 342;
        public const int _height = 321;
        public const string _base = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydE5SXWBlb2tweyKxTPqyPNng4vrCjz8AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7CAAAOwgEVKEqAAAALv0lEQVR4Xu2c3dLjuA1Ek+xf3v+FJy12Cx9MSrJlEVOy0+dCBYIASJ6pcu1czP7rlynAWkuw1hKstQRrLcFaS7DWEqy1BGstwVpLsNYSrLUEay3BWkuw1hKstQRrLcFaS/hmrf9e0fo3Yq0lWGsJX671r8bvN2utJVhrCd+jFe6yPsR0SvLWb8BaS7DWEj5Ga5O2oPWWxz/++CMyCGR0JRdXY60lWGsJn6T1Pw0EFIQvPXZLxkA6E9z9DVhrCdZawudpJc3bAlSG3C7GVzoTSGpiJdZagrWW8MFa//77b2oKqBVEjCDXNLG/w6y1lmCtJdxaK11ELKMryNBs0MpFaAXYihYu8eXYIqy1BGst4e5a//zzz6ZisYAv7QTIdGZJ61igWWRYj2J2sYanVGCtJVhrCbfWCvB4mA25tJNBctMsYRcCVf8us9ZagrWWcDutzYPgkloJlrSTQfLALFhmNY9APcVmrdVarfVt8E4pXH9PgdYNLCVmBZljraRNepDLjA6eirVaawNLSgmQsdYn4J3yl+iSWNILwXJTK/J7RAHbdfY8rNVaV6gjwNJan4N3yl9ikZHyiOkUcAtmO7m5poMtIJY6exLWqqXOnoS1aqmzJ/ExWkdCClkkPcrdLNBiAFs6fgbWKrCl42dgrQJbOn4Gd9QK8EjJO6SJ2pXb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";
        public const string _tail1 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe9ng4gbIYrgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABIFJREFUeF7t0dty2zYUQNFe/v+bXZgH5tCy4ihtdmpl1nrQEIcgJG798UJA1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWRM/lvXPT+1NyBqRNfFo1gn396dmz9iPHfboMtzr3/efkDUha+I7WffbH3a8D/46nBdjHjkPmZ3n8O5kHE88PVkTsia+mXVeckd6y3Q1XZbZcL0ea7m3vv9L9ugyvC7Xxf4Fz0zWhKyJ+1nXu+02h5vleC1xmByfuLvnZnguX098s3/NE5I1IWviTtb1Prvcm4+T5Ry+BjhMl8ddH7n7+Bru3/RsZE3Imngo6/JxeHey7CQfrA376oN5fC/eWwfun/VUZE3Imrif9XNTYblej9mwkzxsP/xWdi8Oazln7h/3JGRNyJq4k/W75j3Hfvs3M5lb0+hq9uzFe+etubhawzlwf/0zkDUha+LfZD3N2+63P1yXc3c5uj1qP3yxhuuQdTGn7e/+2mRNyJr4T1nHvO0kOC9Oc/c07T63nzys5XpqL47T9rd+bbImZE38hKzjiPb6/vN5OoeT7KO5NZuXGV5dD1zX+/u+NlkTsiZ+WtaxXvtaYZnlzJed6nCdzOblZs+yJuet/TVfnqwJWRM/Oet4rXVpMRdjbo1Z7niHm+WYnbN5f8GXJ2tC1kSSdawKU2Q+r875Lne0G3t92CNZr84i83l1znc/WR93FpnPq3O++8n6o65dTjOZW+Oc3605n/vEZyBrQtZEnnUcld7FvVmO2bbs9ZsZ7rOegawJWRO/KOuYOuOMNeFuXDeMfcSTkDUha+KXZr3atT61tz4hWROyJv63rL83WROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZA28vPwDTPTIQSdDSE0AAAAASUVORK5CYII=";
        public const string _tail2 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe9ng4gbIYrgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABAVJREFUeF7t0NFuGzcQQNG2/v9vdiciJaiO7TT2XjlrnPsgcClyCJy/nhWENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlr0qdY/762v3UNaxLWpI+zjubT09M/l8i+CGsS1qRjWCey92FNwpp0GOtE9hbWJKxJn2Ul+2pYk7AmHcw6zT5crElYkw5gnbboXb+Lu85P+/vkYU3CmlSxrpbUO+1Zl2m3K3vrzGFNwpr0cdZpCLbr27Lv94P2rtvmGr4WZwxrEtakL2Z90Qy8LdZ6fvdjpwprEtakw1inJXJUi3Ut9nvnCWsS1qRPsU5kXw1rEtakg1mnBXF489CJcLEmYU36LOv0SNn95B8f1iSsSQewTj/LThvjoE5kOmFNwpp0DOuUyp7LdMKahDXpMNbpVdnV5vlQpzOdsCZhTTqSdRqCY3HXwD39PGFNwpp0MOtqWWzLX7X97lrXV3vi2cKahDUpYV1tmHd9N+R/myt7xGnDmoQ1KWS9tXCnbXltK16735nD+/I5w5qENekRrLcW7rRYX7RFL6bTvnPOsCZhTXoQ65K6b1te26LfwnTCmoQ16XGs2+9XfQPTCWsS1qQHsU7/R/Z7mE5Yk7AmPY51GrXVVvyp/felfeecYU3CmvRQ1ltb7l3fffScYU3CmvQ1rNM7ptPF/MSyWJOwJn0B6yLbfm+H9ffCmoQ16S3T+/1Tm05Yk7AmfQHrNGov2pzXZmcfPWdYk7AmfQ3rfS9ML8g/2n+fM6xJWJP+CNb79u7Jw5qENenrWb9lWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwBj0//wsOznDSjLXurQAAAABJRU5ErkJggg==";
        public const string _tail3 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADgycTsydDg7dGtwe9ng4gvh4AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABIhJREFUeF7t1NFS20AUBNGEhP//ZHLZO1JtGWMMVttZ6PNgpFlLruoHfr0IYFaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRE3ZX3a5F4bsyLMivh61qr5/Pz8d7DsCbMizIo4Jmux7MysCLMiDstaLLszK8KsiFuzWvYssyLMijg4a6nduGZFmBVxQNaSoptaPhu3v19yvzizIsyKOD5rpjGOUH/GZ/mdv0Pf5F3T2+ZxXWZFmBXx9axlb1G6aTl7W3I/ZNr+Be/2sV/eFysyK8KsCCRrrj5qWjJt4/7CkfSp9vrMjy3FrAizIg7LWjrQLAfnQpdMQ6ZNLZ21L/J76zArwqyIm7KWy2Xfjr2U3A+ZNllXLmtWhFkRB2ctHaK9t5TcD5mGTJPe64cWimtWhFkRt2YtF8rO16VPS+6HTEOmSQ7GkVljvi59WnI/ZBoyTXJg1tJFynxd+rTkfsg0ZJrk4AdmLW/Llu4yy8HVWbOu1rSYFWFWxDFZyzVlL4wl95usw1pNi1kRZkUclrWcLdvmUn3demmZNlkXbFrMijAr4sispRJciNuSbcg0ZBoyjaYlb1+HWRFmRRyctXWLhLlOcg79eMsbV2NWhFkRSNaWMNf1TdGhHskrlmVWhFkRYNZdxy1JuKmC+8Wul/pyHl6TWRFmRdwj667jlm53Ym5a8syazIowK+JOWbvUrAvuXv+tjqx9mseWZVaEWRH3y9r5PvQNmhazIsyKuFPWck3Z79G0mBVhVsT9spaq1lLxjRwPeWZNZkWYFXHXrLuUu9g3X12TWRFmRTwma7nQtIzmC5c1K8KsiAdk7WTp9z6zfo5ZEWZFvNd03pduWsyKMCviAVlLVTuRnJta8tU1mRVhVsRjss5Omo7Ir3K8JrMizIr4L7LOsi7OrAizIh6f9VsyK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsgJeXf0XanGfiyPnqAAAAAElFTkSuQmCC";
        public const string _tail4 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe9ng4gbIYrgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABCBJREFUeF7t0e1O4zoUQNE7d97/mZlQHyJE+UgLGxS01g8UOT5OvfnvgYCsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE2EWf+8azY9mdWr9ZOSNSFr4ouzTpuLv++aTU8dt4d9fa2cmqwJWRNfk/XS59FKc5OZvNhX9jPX+acja0LWxGezrsuvHJ+3H7Ufu/2dL52KrAlZE/dn3W8e2Q/fHuaT5yFrQtbEPVkvPcOgu/0r28N8+yRkTciauDnr9wS99vifPE9cWROyJm7L+lNNF1kTsiZ+Z1ZNj5M1IWviaFZNbyJrQtbEoazvNP3/sBm43emabmRNyJq4M+ukut3MH7Z9WtaPzfxhsh4y84f92qwvmk6eT5iD3rZSLvMjzkbWhKyJ27JOmGfW5a/N67fNia/ZxufbpyVrQtbEDVmnx8Ul3aPZdGVev9Z3nfa+bXAOOidZE7ImPsi6XW/dc5I8BZ3XB6z9M/xknfmWNTLz5yRrQtbEbVnvvu02uE64ts7fPRY9edONrAlZE4eyrvvffdtLqLGOemEFXbY9M3ZmsiZkTRzNevdt30r5qt/RdCNrQtbEB1k321U/c9s1vply75qtFzN/TrImZE18nPWrTK1npuVrtrczdk6yJmRNfF/W5cOgy9o2Mycka0LWxLdmPRJ0J+tRsiZkTWylrk3FS8d5OnnTjawJWRPfmvWF1fEx7bOgy7Yym85J1oSsiR/OukzLi1mS9W7TT9avNf1kLUzFJ7N6crImZE38fNZfSdaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErIGHh3+FtZxcrnD/4AAAAABJRU5ErkJggg==";
        public const string _tail5 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe6enp9ng4gqIVbkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABJVJREFUeF7t1N122jAQAOG2yfu/crp4F9XYxD9qhhM5811wJFlYaC749SGAWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVbEd8n6+67mgzMrwqyIb5T1z+QaZc2KMCviRVkj1oa2YV42V6Zvj8esCLMiXpc1kz2VBWsyaSvxWa8YilkRZkW8KGtopQ5qm2NQrxiHWRFmRXxZ1inaUdlrV9sZgzpmEGZFmBXxv1mnSjd5/4O6v1KnfntmRZgV0Z8171mXfgmzIsyKuHjW1wcNAzUNZkWYFXE66+uDhrGaBrMizIroybpWt2fE++vscZgVYVbE6awpa4a6OiZPqVPHYVaEWRGd/611aUYekerU0ZgVYVbEuaxxz7o6adyajVkRZkWcyBq3fX9/r6vDRi9rVoRZEUezZtNUV8fEWWb9emZF/JSs86ZNNfhqF2gazIowK+Jo1rr0pLoyZS/QNJgVYVbEfta459OI85X10z7XaBrMijAr4kTWULe/m6+sn3aIs5o6fkxmRZgVsZM1rjf1/KcCrGw86mDWsvGog1nLxqMO189aF53CpZo/2ni0a35KipVQP2JAZkWYFXEia9PyLTr2ZX16RDBrMWtjVsRW1s8uHJ6WPZ413tzU0mPfGNePGJNZEWZFnM66aBfT+cri6dot5D3Z0/entmdQZkWYFbGTNauFuu5kPV2sLNxC3tWrP2+a20LtG5NZEWZFHM2a6uqPKXMcm3PaTHFu6nUzsbjY09SOwZkVYVbEuawhcyzGuTOnYeqzFSg3hJpfjlkRZkWczhoy3Hyc0ynpbVrf/8HMijAroidrrL+9vbVx22nTxqwIsyJOZ43FkFljMN/ZpjIrwqyInqzxGVnnEWM8n8qsCLMizmVtK+usNdLErAizIk5kjWlbiUFt0jNmRZgV0ZM1PmuHPmFWhFkRW1lDdmwpzXqQWRFmRZzOmgNtMyvCrIhDWU15llkRZkXsZ7VpB7MizIrYyao+ZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFfDx8RcZtAVVoMeqHAAAAABJRU5ErkJggg==";
        public const string _leg1 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAE5SXfqyroFg8AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAAAwNJREFUeF7t0MFtA0EMBEHb+ed8Pp0oQAkUsAS6XrucX/9cAcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZiTVZfz/mf7ayEmUldmSdoh9zPVhZibISZSXKSpSVWJB1Wn6Z4WB7sv7d5jnDwcpK7Mj6Kvpkfaed4WBlJcpKlJUoK1FWoqxEWYmyEjuyvjxZ32Y4WFmJPVm/zHCwshJlJcpKLMh6m5yPOZ2trERZiR1Zb4ua3spKlJVYk3WXshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYHr+geNPldafofKmQAAAABJRU5ErkJggg==";
        public const string _leg2 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAE5SXfqyroFg8AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAAAw9JREFUeF7t0DGOwzAQBEFL//+zTvatAudugASqE4I7Wb0uBWFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSduwHk/zXzusSViT9mAd0ae5LhzWJKxJWJOwJmFN2oB1LI/jnBfrLxrL4zwf1xkWDmvSPqy36uM6w8JhTcKatA3rR3VcZ1g4rEm7sI7qv+sMC4c1aRPWMX2H9TdhTXqzfjfDwmFNwpqENQlrEtakDVjvhvPTnNYOaxLWpD1Y7zYyvcOahDVpG9a9wpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYQ26rj8tGFc8tCjLDAAAAABJRU5ErkJggg==";
        public const string _wings = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAYAAAAsfIegAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMjHxIGmVAAARjElEQVR4Xu3cTcrEdnaF8c4yMs04o0BGyQqakIYMG3oHmQSysWQ32UToWdOZOBZG9vH1I5V09VH6eA78wJz7L5VUfnVHxr/74YcfJEk7wlKS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4sJUl9WEqS+rCUJPVhKUnqw1KS1IelJKkPS0lSH5aSpD4spSej0DmpC0vpiZaEPiethaWu55/+4T9/6KrXepu1oWtIa2Cp66GFuVS91ltQ6Nyghs5IS2Gp66GFuVS91hvU0JkqQ3NpKSx1LlqG1d/917+05XXqdz9RDZ0hGZpLS2Gpc+Xim0ILc6m8Tv3uJ8rQfEqG5tJSWOpcufim0MJcKq9Tv/uJxtBsTobm0lJY6hi54BItw6Pk99b7uzMKnZuTobm0FJY6Ri61RAvwKPm99f7uZi50fk4NnZGWwlLHyKWWaAEeJb+33t+dTIXOflJDZ6Q1sNR+cpHlgvu///7nQ+V3pbyfeq93UUNnlqqhM9JaWGo/uchywdEy3FN+V8r7qfd6FxmaL0Whc9JaWGo/uchywdEy3FN+V8r7qfd6Fxmar1FDZ6S1sNQ2ubxo6Q3+8e///VD5XbRgB3mf9RmuqobOrJWhubQWltomF1YuuETLcE/5XbRUB3mf9RmuqobOrJWhubQWltomF1YuuETLcE/5XbRUB3mf9RmuLEPzjgzNpTWw1Hq03Ob867/96VD5XU9bshmad2RoLq2BpdbLRbYELcM95Xc9ebEOoTNrjaGZtBaWWi8X2RK0DPeU3/W0xTrI0HyNDM2ltbDUtFxAiZbbVTx1yWZovlSG5tJaWGpaLp1EC+0q3rBYh9CZTzI0lzqw1LRcOokW2lU8dbEOaugModA5qQNL3XOBTlm7WFM+e/2NrmJr6JrSFljKxTrKZ6+/0ZV0QteR9oClXKyjfPb6G13VXOi8tDcs3ySXTqIF9QT5jG9Yskvkb1JnUgeWb5IvVaKl9AT5jC7Wn+RvUmdSB5Zvki9VoqX0BPmMLtaf5G9SZ1IHlk+XLxItnyfLZ1+7WNPdl2z+Dunuz6VrwPLp8kWi5fNk+ewu1t+ae64//+///EftJILl0+WLRMvnyfLZXay/dffn0jVg+UT58tDCebKpZ8/+qUs27y2f9w+//+PP8kz9vNSB5RPlS5XL5Q2mnj17F+s171/3hOUT5UuVy+UNpp49exfrNe9f94TlU+SLlAvlqfJ5E52t8vwdl2x+75Q//+WvP8u+XkvaCsunyGVBy+Rp8nkTna3yvItV2gbLp8hlQcvkafJ5E52t8ryLVdoGyzvLBUEL5GmOeN685tWWbF4z0fcP6OygXlfaE5Z3lkuBlsbTHPG8eU0Xq7QelneWS4GWxtMc8bx5TRertB6Wd5OLgBbF05z5vPldey3ZVP9djujsgK49h64xqN8n7QnLu8mXn5bD05z5vPldLlZpGSzvJl9+Wg5Pc+bz5ne5WKVlsLyDfOFpITxBPmOis0fJ792yWKfQ0hvQ2Y68Zv0bko6C5R3kC08L4QnyGROdPUp+r4tVWgbLO8gXnhbCE+QzJjp7lPxeF+tvZWiud8LyDvKFp4VwV1d+rry3o5cszefkZ1P9u9lTDZ3RO2F5B/mS0xK4qys/V97b2xcrhc7pnbC8g3zJaQnc1ZWfK+/NxfpLaK53w/Kq8sWmF/+u7vhcec9HL9klMqXHv6UtMjSXsLyqfJnpZb+rOz5X3rOLVfo1LK8qX2Z62e/qjs+V9/zWxUozaYDlleQLTC/4XT3pufJZjliySxy9TEcZmksDLK8kX1p6qe/qSc+Vz+JilVysX/Ok58pncbFKLtZTPelZpuQzHrFk85rJxaorwfJK8kWlF/lOnvQsU/IZc/HRkuzIa6azFutgDM2kAZZXki8qvch38qRnmZLPmIuPlmRHXjN9Y7EOobmE5bfly0kv75086VnWymenZbhULs0p9W/oSBmaS1h+W76Q9MLeyZOeZa18dlqYS9Eirerf0NEyNNe7Yflt+ULSC3snT3qWtfLZaWEuRYu0qn9DR6uhM3ovLL8tX0h6Ya8o7znR2Sej36CDlufgz3/568+yr39DZ8jQXO+F5bflC0Yv7xXlPSc6+2T0G3Tk0kxXWqyDDM31Tlh+W75g9PJeUd5zorNPRr9BRy7NdMRizaU498+fMp6VsPyGfKnohb2KvM9EZ5+MfoMBnZ1D1xjQf2o12GOZHhH6Hr0Xlt+QLxW9gFeR95no7JPRbzCgs3PoGgNaqoMti3Xv0HdIAyy/IV8qegGvIu8z0dkno99gQGfn0DUGtFQHey9WOidtheU35EtFL+BSeZ0noWc929r7ySU4hZbnnPxs/RuaU0NnpL1g+Q1rX9opeZ0noWc929r7ySU4hZbnnPxs/Ruak6G5tCcsv2HtSzslr/Mk9KxnW3s/uQSn0PKck5+tf0NzMjSX9oTlWZa8qHlmrfp9d0bPN4d+y6XoegM6O8hll6YW4l7qbzSlhs5Ie8LyLEte2jyzVv2+O6Pnm0O/5VJ0vQGdHdDSG1xlsQ4yNJf2hOVZlry0eWat+n13Rs83h37Lpeh6Azo7oKU3cLHqrbA8C728Vf2MlqHfssrlONUnWm6DXKBHy++tzzynhs50jaGZ3gnLs+TLPKV+RsvQb1nl0pzqUy61RAvwKPm99Zk/qaEzS0yFzuqdsDxLvsxT6me0DP2WVS7NqT7lUku0AI+S31ufeYkaOrMEhc7pnbDUPih07ltymU7JRUaLbin6/6x25L3V51mqhs4skaG53gtL9X0KfeZbcklNeeJiHVDo3CcZmuudsNR6c6HzV5BLaspTF+uohs58MoZmeicstRyFzt3V2sVKy3CQC3Ev9V67aujMJ93P6Zmw1DI1dGapDM2/5Q2LdVBDZ6SlsNRnGZqvlaH5t7xlsQ4odE76BEvNy9C8K0Pzs2xZprQAK/pPuTrymvUZtqihM9IcLDUtQ/MtMjQ/y9sX66CGzkhTsBTL0HwPY2h2FhfrLzI0lwiWYhma72EMzY60ZJnmAk254GgBDpac2SKvX59tqwzNpQpL/VaG5nvJ0PwoLtZ5GZpLCUv91hiazamhMylD86O4WD/L0FwaYalfy9CcTIXOVmNotqe1yzSXV6JFN1hy5gj5vfWZt8rQXBpgqV/L0Lyqya6eJWNoticX63oZmksDLPVrY2hW1VCf50mG5ntxsfZkaC5hqV9kaF6NmeqH1FmVofkWU8s0F2jKJUVLbM6Wz+4l7yHV32WtDM31bljqFxmap8zcnGYpQ/MtXKw/qb/LWhma692w1E8yNK8yc3OaVWNotoWL9Sf1d+kYQzO9G5b6vCTJGJoNxtCsGkOztXKZ0vIc0PIZ0LKas+WzZ8r7rL/XUhma672wfLsaOkPG0GyQoXnK0HwNF+tv5X3W32upDM31Xli+WQ2dIRmaDzI0Txmar+Fi/a28z/p7LZWhud4Ly7eqoTOkhs4MMjRPGZqvkUtkCi2fpfa6Tsprnqn+dp+MoZneC8u3ytB8SobmowzNU4bma9ACqWi5LbXXdVJe80z1t/skQ3O9E5ZvlKH5lAzNqzE0Sxmar0ELpKLlttRe10l5zTPV345Q6JzeC8u3ydB8Sg2dSRmapwzNP6GlMaAl1rHlmvnZKfV5pDvB8m0yNJ+SoflgKnQ2ZWj+CS2rAS26ji3XzM9Oqc8j3QmWbzOGZlMyc7Op1M9UGZp/QstqQIuuY8s187NT6vNId4Llm2RoTjJT/afk5/ZCC2pAy22rJdfPM6net/Q0WL5JhuakhrohU5+r/V5oiQ1o6W215Pp5JtX7lp4GyzfJ0HzKXOj8GWiJDWjpbbXk+nkm1fuWngbLN8nQfA6FznWModmUXF606LbK6//h93/8Wfap3p/0Fli+zRiafZKheUeG5lNyqdFi3Cqvf7XFOoZm0tmwfJsMzc+WofmUXGq0GLfK67tYpWlYPsVUpub52W/J0LzKRUbLcKu8/tQyrfd0tgzNpbNh+RRrQp8/Ww2dqXLB0WLcKq/vYpWWwfIploQ+9w01dIbkgqPFuFVe/4qLtYbOSGfD8ik+hT7zDTV0ZkouOFqMW+X1U72Pb6mhM9LZsHwaCp07G4XOzcllR4txq7x+qvfxLTV0Rjoblk9BoXNnmgud/ySXHS3GrfL6qd7HN2Vovrep0Fm9E5Z3R6FzZ1gS+tycXHC0DDvymql+9xXV0Jm9zIXO652wvLMaOnOkpaHPLpWLj5ZkR14z1e++kqnQ2b1R6JzeCcu7qqEzR6OMfT3blYuPlmRHXjPV776SGjpzpBo6o3fC8o4yND/DGJptlcuOFmNHXrN+39VlaH6WDM31TljeTYbmZxlDs61yCdKS7Mhr1u9bi0LnRjV0Zk6G5mfJ0FzvhOXdZGh+hgzNt8olSEuyI69Zv2+tvULXTjV05kwZmuudsLybMTQ7Q4bme8glSEtyTn421e/Y05bQ9QY1dOZsGZrrnbC8kwzN54yh2VIZmu8lFyItzzn52VS/4wg1dGZQs3b+DTV0Ru+E5Z1kaE5q6MwSGZrvKRciLc85+dlUv+PbloQ+9w01dEbvheWdZGie5kLn59TQma1yCdLCnJOfrde9qk+hz3wDhc7pvbC8kwzNRzW1q+fn1NCZPeRypOU5Jz9br7tWhuZvMBU6K2F5JzV0ZpChbkieJxQ6t5dcjrQ85+Rn63XXytD86WrojJSwvJuapTOaD/k0H5JnjpLLkZbnIM+keq0tMjR/Kgqdkyos72Zp6LODtaFrHCEXJS3VQZ5J9VpbZGj+RJ9Cn5FGWN7VXOh8WhL63JFyUdJSHeSZVK+11RiaPd2n0Gf0bljeXYbmS2z57F5yUU4t0/qZo4yh2RZjaHZFU6Gzei8sdQ25QK+yWIfQvCND8zXG0OwoNXRG74SlriEX6LcX6yBD8zVq6MxSGZofKUNzvROWuoZcoKmeO0uG5t8w5sff5Y8/+tsf/Q2dO9IYmumdsNQ1jIu0qufOlKH5Nwz58Xc5faGmIdTrnbDUNdSFOqrnzpah+Rv5WyhhKX1SQ2fexN9ACUtpiRo68xZvf379GpbSGjV05snG0EzvhKUkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLUh6UkqQ9LSVIflpKkPiwlSX1YSpL6sJQk9WEpSerDUpLU9cPv/h8rnsM9YYFMSQAAAABJRU5ErkJggg==";

        public static string twpath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "/dicpicbot_data/";
        public int randLevel = 20;
        public int brLevel = 70;
        public bool name = true;

        [Command("prima")]
        public async Task Primagen()
        {
            await Context.Channel.SendMessageAsync("Hold on, processing...");
            Bitmap prima = createBackground(colourBase(createBase(), getSimilarColours(brLevel, randLevel, 4)));
            prima.Save(twpath + "/latestprima.png");
            await Context.Channel.SendFileAsync(twpath + "/latestprima.png", "Naughty naughty~");
            prima.Dispose();
        }

        //creation routines -----------------------------------------------------------------------------------------------------

        public Bitmap createBase()
        {
            Bitmap template = new Bitmap(_width, _height);
            Graphics g = Graphics.FromImage(template);

            //wings must be drawn before the body, so give a 50% chance of drawing winds
            if (rnd.NextDouble() >= 0.5) { g.DrawImage(bitmapFromB64(_wings), new Point(0, 0)); }

            //draw body
            g.DrawImage(bitmapFromB64(_base), new Point(0, 0));

            //convert all tails to bitmaps and add to a list
            List<Bitmap> Tails = new List<Bitmap> { };
            Tails.Add(bitmapFromB64(_tail1));
            Tails.Add(bitmapFromB64(_tail2));
            Tails.Add(bitmapFromB64(_tail3));
            Tails.Add(bitmapFromB64(_tail4));
            Tails.Add(bitmapFromB64(_tail5));

            //convert all legs to bitmaps and add to a list
            List<Bitmap> Legs = new List<Bitmap> { };
            Legs.Add(bitmapFromB64(_leg1));
            Legs.Add(bitmapFromB64(_leg2));

            //pick a random position of an item in the list. wings should just be on / off
            int tail = rnd.Next(0, Tails.Count());
            int leg = rnd.Next(0, Legs.Count());

            //draw the chosen tail and legs
            g.DrawImage(Tails[tail], new Point(0, 0));
            g.DrawImage(Legs[leg], new Point(0, 0));

            return template;
        }

        public Bitmap colourBase(Bitmap template, List<Color> colors)
        {
            //colours found on bases and what they should be used for
            Color basePrimary = Color.FromArgb(107, 112, 123);
            Color baseSecondary = Color.FromArgb(217, 224, 226);
            Color baseMetal = Color.FromArgb(34, 177, 76);
            Color baseHighlight = Color.FromArgb(250, 178, 60);

            Graphics g = Graphics.FromImage(template);

            //check every pixel of the base for known colours and replace with new ones
            for (int h = 0; h < _height; h++)
            {
                for (int w = 0; w < _width; w++)
                {
                    Color current = template.GetPixel(w, h);
                    if (current == basePrimary)
                    {
                        Brush b = new SolidBrush(colors[1]);
                        g.FillRectangle(b, w, h, 1, 1);
                    }

                    if (current == baseSecondary)
                    {
                        Brush b = new SolidBrush(colors[2]);
                        g.FillRectangle(b, w, h, 1, 1);
                    }

                    if (current == baseMetal)
                    {
                        Brush b = new SolidBrush(colors[3]);
                        g.FillRectangle(b, w, h, 1, 1);
                    }

                    if (current == baseHighlight)
                    {
                        Brush b = new SolidBrush(colors[0]);
                        g.FillRectangle(b, w, h, 1, 1);
                    }
                }
            }

            //if name is enabled, draw the name
            if (name)
            {
                string name = getName();
                Font lf = new Font("Lucida Console", 15f);

                SizeF sSize = g.MeasureString(name, lf);
                sSize.Height = sSize.Height + 2;
                Rectangle rec = new Rectangle(new Point(5, 5), sSize.ToSize());
                g.FillRectangle(Brushes.Black, rec);
                g.DrawString(name, lf, Brushes.White, new Point(5, 7));
            }

            return template;
        }

        public Bitmap createBackground(Bitmap prima)
        {
            Color background = getSimilarColours(150, 10, 2)[1];
            Bitmap bmp = new Bitmap(_width, _height);
            Graphics g = Graphics.FromImage(bmp);
            SolidBrush b = new SolidBrush(background);
            g.FillRectangle(b, 0, 0, _width, _height);
            g.DrawImage(prima, new Point(0, 0));
            return bmp;
        }

        public Bitmap getPrima()
        {
            return createBackground(colourBase(createBase(), getSimilarColours(brLevel, randLevel, 4)));
        }

        //colour creation -----------------------------------------------------------------------------------------------------
        public static List<Color> getSimilarColours(int brlim, int similarity, int colourNum)
        {
            if (brlim > 255)
            {
                throw new System.ArgumentException("brightness limit must be under 255");
            }

            List<Color> colours = new List<Color> { };

            Color highlight = Color.FromArgb(rnd.Next(100, 255), rnd.Next(100, 255), rnd.Next(100, 255));
            colours.Add(highlight);

            Color seed = Color.FromArgb(rnd.Next(brlim, 255), rnd.Next(brlim, 255), rnd.Next(brlim, 255));

            for (int i = 0; i < colourNum; i++)
            {
                int[] newValues = new int[] { 0, 0, 0 };

                //red
                int spaceRedUp = seed.R + similarity;
                int spaceRedLow = seed.R - similarity;

                int modifRed = rnd.Next(0, similarity);

                if (rnd.NextDouble() >= 0.5)
                {
                    //adding
                    newValues[0] = seed.R + modifRed;
                    if (newValues[0] > 255)
                    {
                        newValues[0] = 255;
                    }
                }
                else
                {
                    //subtracting
                    newValues[0] = seed.R - modifRed;
                    if (newValues[0] < brlim)
                    {
                        newValues[0] = brlim;
                    }
                }

                //Green
                int spaceGreenUp = seed.G + similarity;
                int spaceGreenLow = seed.G - similarity;

                int modifGreen = rnd.Next(0, similarity);

                if (rnd.NextDouble() >= 0.5)
                {
                    //adding
                    newValues[1] = seed.G + modifGreen;
                    if (newValues[1] > 255)
                    {
                        newValues[1] = 255;
                    }
                }
                else
                {
                    //subtracting
                    newValues[1] = seed.G - modifGreen;
                    if (newValues[1] < brlim)
                    {
                        newValues[1] = brlim;
                    }
                }

                //Blue scaramucci
                int spaceBlueUp = seed.B + similarity;
                int spaceBlueLow = seed.B - similarity;

                int modifBlue = rnd.Next(0, similarity);

                if (rnd.NextDouble() >= 0.5)
                {
                    //adding
                    newValues[2] = seed.B + modifBlue;
                    if (newValues[2] > 255)
                    {
                        newValues[2] = 255;
                    }
                }
                else
                {
                    //subtracting
                    newValues[2] = seed.B - modifBlue;
                    if (newValues[2] < brlim)
                    {
                        newValues[2] = brlim;
                    }
                }

                Color newColour = Color.FromArgb(newValues[0], newValues[1], newValues[2]);

                colours.Add(newColour);
            }

            return colours;

        }

        //get name for primagens
        private string getName()
        {
            //if using a random name

                try
                {
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                    //get name from API
                    WebClient w = new WebClient();
                    byte[] dat = w.DownloadData("https://namey.muffinlabs.com/name.json?type=surname");
                    string name = System.Text.Encoding.UTF8.GetString(dat);
                    name = name.Substring(2, name.Length - 4);
                    return name;
                }
                catch (WebException ex)
                {
                    //if API is down, return error
                    Console.WriteLine(ex.Message);
                    return "apiError";
                }
            

        }


        //misc functions -----------------------------------------------------------------------------------------------------
        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            string rand = "";
            for (int i = 0; i < length; i++)
            {
                rand = rand + chars[rnd.Next(0, chars.Length)];
            }
            rand = rand + ".png";
            return rand;
        }

        public Bitmap bitmapFromB64(string base64)
        {
            byte[] byteBuffer = Convert.FromBase64String(base64);
            MemoryStream memoryStream = new MemoryStream(byteBuffer);
            memoryStream.Position = 0;
            Bitmap ret = (Bitmap)Bitmap.FromStream(memoryStream);
            memoryStream.Close();
            memoryStream = null;
            byteBuffer = null;
            return ret;
        }
    }
}
